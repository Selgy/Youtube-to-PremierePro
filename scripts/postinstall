#!/bin/bash

# Function to log messages
log() {
    local message="$1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') $message"
}

log "Starting the installation script."

# Get the current user
loggedInUser=$(scutil <<< "show State:/Users/ConsoleUser" | awk '/Name :/ && ! /loginwindow/ { print $3 }')
log "Current user: $loggedInUser"

# Get the UID of the logged-in user
uid=$(id -u "$loggedInUser")
log "User ID: $uid"

# Enable PlayerDebugMode for Adobe CEP versions 6 to 11 in user context
for csxs_version in {6..11}; do
    launchctl asuser "$uid" sudo -u "$loggedInUser" defaults write "com.adobe.CSXS.$csxs_version" PlayerDebugMode 1
    log "Enabled PlayerDebugMode for com.adobe.CSXS.$csxs_version"
done

# Define the user's Adobe CEP extensions directory
CEP_EXTENSIONS_DIR="/Library/Application Support/Adobe/CEP/extensions"
GITHUB_REPO_URL="https://github.com/Selgy/Youtube-to-PremierePro/archive/Pre-released.zip"
EXECUTABLE_PATH="/Applications/YoutubetoPremiere"

log "Creating $CEP_EXTENSIONS_DIR..."
mkdir -p "$CEP_EXTENSIONS_DIR" && log "Directory created successfully." || { log "Failed to create $CEP_EXTENSIONS_DIR"; exit 1; }

log "Downloading com.selgy.youtubetopremiere from GitHub..."
curl -L "$GITHUB_REPO_URL" --output "$CEP_EXTENSIONS_DIR/com.selgy.youtubetopremiere.zip" && log "Download successful." || { log "Failed to download from GitHub"; exit 1; }

log "Installing com.selgy.youtubetopremiere..."
unzip -o "$CEP_EXTENSIONS_DIR/com.selgy.youtubetopremiere.zip" -d "$CEP_EXTENSIONS_DIR" && log "Unzip successful." || { log "Unzip failed"; exit 1; }

# Removing existing installation if it exists
TARGET_DIR="$CEP_EXTENSIONS_DIR/com.selgy.youtubetopremiere"
SOURCE_DIR="$CEP_EXTENSIONS_DIR/Youtube-to-PremierePro-Pre-released/com.selgy.youtubetopremiere"

if [ -d "$TARGET_DIR" ]; then
    log "Existing installation found. Removing..."
    rm -rf "$TARGET_DIR" && log "Existing directory removed." || { log "Failed to remove existing directory"; exit 1; }
fi

mv -f "$SOURCE_DIR" "$TARGET_DIR" && log "Installation successful." || { log "Failed to install"; exit 1; }

# Delete the intermediate folder from GitHub
rm -rf "$CEP_EXTENSIONS_DIR/Youtube-to-PremierePro-Pre-released" && log "Intermediate folder deleted successfully." || { log "Failed to delete intermediate folder"; exit 1; }

# Delete the downloaded ZIP file
rm -f "$CEP_EXTENSIONS_DIR/com.selgy.youtubetopremiere.zip" && log "ZIP file deleted successfully." || { log "Failed to delete ZIP file"; exit 1; }

EXEC_DIR="$TARGET_DIR/exec"
log "Creating $EXEC_DIR..."
mkdir -p "$EXEC_DIR" && log "Exec directory created successfully." || { log "Failed to create $EXEC_DIR"; exit 1; }

log "Copying executable to $EXEC_DIR..."
cp -R "$EXECUTABLE_PATH/"* "$EXEC_DIR" && log "Executable copied successfully." || { log "Failed to copy executable"; exit 1; }

# Function to download and unzip FFmpeg
download_and_unzip_ffmpeg() {
    local url="$1"
    local output_dir="$2"
    local zip_path="$output_dir/ffmpeg.zip"
    local retry_count=5

    for ((i=1; i<=retry_count; i++)); do
        log "Downloading FFmpeg (attempt $i)..."
        if curl -L "$url" --output "$zip_path"; then
            log "FFmpeg download successful."
        else
            log "Failed to download FFmpeg."
            continue
        fi

        log "Verifying the downloaded file..."
        if file "$zip_path" | grep -q "Zip archive data"; then
            log "Download is a valid zip file."
        else
            log "Download is not a valid zip file. Deleting and retrying..."
            rm "$zip_path"
            continue
        fi

        log "Unzipping FFmpeg..."
        if unzip -o "$zip_path" -d "$output_dir"; then
            log "FFmpeg unzip successful."
            rm "$zip_path"
            return 0
        else
            log "Failed to unzip FFmpeg. Deleting and retrying..."
            rm "$zip_path"
        fi

        log "Retrying download and unzip..."
    done

    return 1
}

# Change ownership and permissions of FFmpeg binary and yt-dlp
FFMPEG_BIN_DIR="$CEP_EXTENSIONS_DIR/com.selgy.youtubetopremiere/exec/_internal/ffmpeg/bin"
YT_DLP_DIR="$CEP_EXTENSIONS_DIR/com.selgy.youtubetopremiere/exec/_internal"

# Ensure directories exist
mkdir -p "$FFMPEG_BIN_DIR" && log "FFmpeg bin directory created."
mkdir -p "$YT_DLP_DIR" && log "yt-dlp directory created."

# Download and unpack FFmpeg
FFMPEG_URL="https://evermeet.cx/pub/ffmpeg/snapshots/ffmpeg-116306-g5d74dcf0e3.zip"
log "Downloading and unzipping FFmpeg..."
if download_and_unzip_ffmpeg "$FFMPEG_URL" "$FFMPEG_BIN_DIR"; then
    log "FFmpeg setup completed successfully."
else
    log "Failed to set up FFmpeg after multiple attempts."
    exit 1
fi

# Remove quarantine attribute from FFmpeg to avoid "cannot be opened" error
if [ -f "$FFMPEG_BIN_DIR/ffmpeg" ]; then
    if xattr -d com.apple.quarantine "$FFMPEG_BIN_DIR/ffmpeg"; then
        log "Removed quarantine attribute from FFmpeg."
    else
        log "No quarantine attribute found on FFmpeg."
    fi
else
    log "FFmpeg binary not found after unzip."
    exit 1
fi

# Set ownership to the logged-in user, and set execute permissions
chown "$loggedInUser" "$FFMPEG_BIN_DIR/ffmpeg" "$YT_DLP_DIR/yt-dlp"
chmod +x "$FFMPEG_BIN_DIR/ffmpeg" "$YT_DLP_DIR/yt-dlp"
log "Set ownership and permissions for FFmpeg and yt-dlp."

# Ensure FFmpeg is executable and in the PATH
export FFMPEG="$FFMPEG_BIN_DIR/ffmpeg"
log "FFmpeg path set to $FFMPEG"

# Test if FFmpeg is correctly set up
if [ -x "$FFMPEG" ]; then
    log "FFmpeg is executable."
else
    log "FFmpeg is not executable. Exiting."
    exit 1
fi

log "Cleanup started..."
# Force delete the directories
sudo rm -rf "/Applications/YoutubetoPremiere" && log "Deleted /Applications/YoutubetoPremiere directory." || { log "Failed to delete /Applications/YoutubetoPremiere"; exit 1; }
sudo rm -rf "/Applications/com.selgy.youtubetopremiere" && log "Deleted /Applications/com.selgy.youtubetopremiere directory." || { log "Failed to delete /Applications/com.selgy.youtubetopremiere"; exit 1; }

log "Cleanup completed."

# Open the web page in the default browser
log "Opening the web page in the default browser..."
open "https://chromewebstore.google.com/u/3/detail/youtube-to-premiere-pro-v/fnhpeiohcfobchjffmgfdeobphhmaibb?hl=fr"
log "Script completed."
