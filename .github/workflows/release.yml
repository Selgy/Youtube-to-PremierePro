name: Build and Package

on:
  push:
    branches:
      - Pre-released

jobs:
  mac-build:
    runs-on: macos-latest
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
  
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.8
  
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
  
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'
        
    - name: Install Adobe CEP ZXP Packager
      run: npm install -g create-zxp
  
    - name: Upgrade pip
      run: python -m pip install --upgrade pip
  
    - name: Install dependencies
      run: pip install -r requirements.txt
  
    - name: Check FFmpeg installation
      run: |
        if brew list --versions ffmpeg > /dev/null; then
          echo "FFmpeg is already installed."
          echo "Checking for updates..."
          brew outdated ffmpeg || brew upgrade ffmpeg
        else
          echo "FFmpeg is not installed. Installing it now..."
          brew install ffmpeg
        fi
  
    - name: Install PyInstaller
      run: pip install pyinstaller
  
    - name: Build Application with PyInstaller
      run: |
          # Continue with PyInstaller
          pyinstaller --onefile --clean --windowed --debug all \
            --hidden-import=engineio.async_drivers.eventlet \
            --hidden-import=engineio.async_drivers.gevent_uwsgi \
            --hidden-import=engineio.async_drivers.gevent \
            --hidden-import=engineio.async_drivers \
            --hidden-import=gevent \
            --hidden-import=engineio.async_drivers.threading \
            --hidden-import=pygame.freetype \
            --hidden-import=encodings.utf_16_le \
            --add-data "./icon.png:." \
            --add-data "./notification_sound.mp3:." \
            --icon "./icon.icns" \
            YoutubetoPremiere.py


    - name: Prepare PymiereLink folder
      run: |
              mkdir -p ./PymiereLink/
              mkdir -p ./PymiereLink/exec
              mv "./dist/YoutubetoPremiere.app/Contents/MacOS/YoutubetoPremiere" "./PymiereLink/exec/"
              cp -R /usr/local/Cellar/ffmpeg/6.0_1 "./PymiereLink/exec/ffmpeg"
      
    - name: Zip PackageContents folder
      run: |
            cd PymiereLink
            zip -r ../YoutubetoPremiere_Mac.zip ./
            cd ..
            
    - name: Zip to ZXP
      run: mv YoutubetoPremiere_Mac.zip YoutubetoPremiere_Mac.zxp      

    - name: Find YoutubetoPremiere_Mac.zxp
      run: find . -name "YoutubetoPremiere_Mac.zip"
      
    - name: List directory contents
      run: ls -R ./dist/YoutubetoPremiere.app/Contents/Resources/
      
    - name: Get the release
      id: get_release
      uses: actions/github-script@v5
      with:
        script: |
          const { owner, repo } = context.repo
          const releases = await github.rest.repos.listReleases({ owner, repo })
          const preRelease = releases.data.find(release => release.prerelease && release.tag_name === 'V1.1')
          return preRelease.upload_url

    - name: Upload executables to asset
      id: upload-release-asset
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_SECRET }}
      with:
        draft: ${{ github.ref == 'refs/heads/master' }}
        prerelease: ${{ github.ref != 'refs/heads/master' }}
        tag_name: V1.1
        files: |
          ./YoutubetoPremiere_Mac.zxp

  win-build:
    needs: mac-build
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with: 
        persist-credentials: false

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.8
      
    - name: Cache pip
      uses: actions/cache@v2
      with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Download FFmpeg
      run: |
        mkdir ffmpeg
        curl -L https://www.gyan.dev/ffmpeg/builds/packages/ffmpeg-6.0-full_build.7z -o ffmpeg.7z

    - name: Extract FFmpeg
      run: |
        7z x ffmpeg.7z -offmpeg -aoa

    - name: Rename FFmpeg Folder
      run: |
        mv ./ffmpeg/ffmpeg-6.0-full_build ./ffmpeg/ffmpeg_win

    - name: Find ffmpeg.exe
      shell: pwsh
      run: |
        Get-ChildItem -Recurse -Filter ffmpeg.exe | Format-Table FullName
      
      
    - name: Install PyInstaller
      run: pip install pyinstaller



    - name: Build Application with PyInstaller
      run: |
            pyinstaller --onefile --clean --windowed --debug all `
            --hidden-import=engineio.async_drivers.eventlet `
            --hidden-import=engineio.async_drivers.gevent_uwsgi `
            --hidden-import=engineio.async_drivers.gevent `
            --hidden-import=engineio.async_drivers `
            --hidden-import=gevent `
            --hidden-import=engineio.async_drivers.threading `
            --hidden-import=pygame.freetype `
            --hidden-import=encodings.utf_16_le `
            --add-binary "./ffmpeg/ffmpeg_win/bin/ffmpeg.exe;./ffmpeg_win/bin/" `
            --add-data "./icon.png;." `
            --add-data "./notification_sound.mp3;." `
            --icon "./icon.ico" `
            YoutubetoPremiere.py 
    
        
    - name: Install NSIS
      run: choco install nsis

    - name: Install NSIS Plugins
      run: |
        curl -L https://nsis.sourceforge.io/NsExec_plug-in -o nsExec.dll
        mkdir -p "$RUNNER_TOOL_CACHE/nsis/3.0/nsis/plugins/x86-unicode/"
        mv nsExec.dll "$RUNNER_TOOL_CACHE/nsis/3.0/nsis/plugins/x86-unicode/"

        
    - name: Create Installer with NSIS
      run: |
            !include "MUI2.nsh"
            !include "nsProcess.nsh"
            
            # UI Configuration
            !define MUI_ABORTWARNING
            !define MUI_ICON "icon.ico"
            
            # Installer Pages
            !insertmacro MUI_PAGE_WELCOME
            !insertmacro MUI_PAGE_DIRECTORY
            !insertmacro MUI_PAGE_INSTFILES
            !insertmacro MUI_PAGE_FINISH
            
            # Installer Language
            !insertmacro MUI_LANGUAGE "English"
            
            # Installer Sections
            Section "PreInstall" SEC_PRE
                # Close YoutubetoPremiere.exe if it's running
                nsProcess::KillProcess "YoutubetoPremiere.exe"
                Pop $0  # Get the result
            
                # Delete existing YoutubetoPremiere.exe
                IfFileExists "C:\Program Files (x86)\YoutubetoPremiere\YoutubetoPremiere.exe" 0 +2
                Delete "C:\Program Files (x86)\YoutubetoPremiere\YoutubetoPremiere.exe"
            SectionEnd
            
            Section "MainSection" SEC01
                SetOutPath "$INSTDIR"
            
                # Copy the PymiereLink extension
                SetOutPath "$INSTDIR\PymiereLink"
                File /r "PymiereLink\*.*"
            
                # Install YoutubetoPremiere
                SetOutPath "$INSTDIR\PymiereLink\exec"
                File "dist\YoutubetoPremiere.exe"
            
                # Install FFmpeg
                CreateDirectory "$INSTDIR\PymiereLink\exec\ffmpeg_win"
                SetOutPath "$INSTDIR\PymiereLink\exec\ffmpeg_win"
                File /r "ffmpeg\ffmpeg_win\*.*"
            SectionEnd
            
            Function .onInit
                # Set the installation directory
                StrCpy $INSTDIR "C:\Program Files (x86)\Common Files\Adobe\CEP\extensions\PymiereLink"
            FunctionEnd
            
            # Installer configuration
            Name "YoutubetoPremiere Installer"
            OutFile "YoutubetoPremiereInstaller.exe"
            ShowInstDetails show
            ShowUnInstDetails show

    - name: List directory contents dist
      run: dir dist
    
    - name: Get the release
      id: get_release
      uses: actions/github-script@v5
      with:
          script: |
            const { owner, repo } = context.repo
            const releases = await github.rest.repos.listReleases({ owner, repo })
            const preRelease = releases.data.find(release => release.prerelease and release.tag_name === 'V1.1')
            return preRelease.upload_url
    
    - name: Upload executables to asset
      id: upload-release-asset
      uses: softprops/action-gh-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GH_SECRET }}
      with:
          draft: ${{ github.ref == 'refs/heads/master' }}
          prerelease: ${{ github.ref != 'refs/heads/master' }}
          tag_name: V1.1
          files: |
              YoutubetoPremiereInstaller.exe