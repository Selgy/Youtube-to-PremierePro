name: Build and Package

on:
  push:
    branches:
      - Pre-released

jobs:
  mac-build:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.8

    - name: Cache pip
      uses: actions/cache@v2
      with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Check and Copy FFmpeg
      run: |
          # Install FFmpeg if not present
          if ! brew list --versions ffmpeg > /dev/null; then
            echo "Installing FFmpeg..."
            brew install ffmpeg
          else
            echo "FFmpeg is already installed."
          fi

          # Define the destination path for FFmpeg
          EXEC_PATH="./ffmpeg"

          # Create the directory at the root and copy the entire FFmpeg installation
          mkdir -p $EXEC_PATH
          cp -R $(brew --prefix ffmpeg)/. $EXEC_PATH/

    - name: Install PyInstaller
      run: pip install pyinstaller

    - name: Build Application with PyInstaller
      run: |
        pyinstaller --onefile --clean --windowed --debug all \
        --hidden-import=engineio.async_drivers.eventlet \
        --hidden-import=engineio.async_drivers.gevent_uwsgi \
        --hidden-import=engineio.async_drivers.gevent \
        --hidden-import=engineio.async_drivers \
        --hidden-import=gevent \
        --hidden-import=engineio.async_drivers.threading \
        --hidden-import=pygame.freetype \
        --hidden-import=encodings.utf_16_le \
        --add-data "./icon.png:." \
        --add-data "./notification_sound.mp3:." \
        --icon "./icon.icns" \
        YoutubetoPremiere.py



    - name: Prepare PymiereLink and Installation Script
      run: |

        cp -R "./PymiereLink" "./dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink"
        cp "install_pymierelink.sh" "./dist/YoutubetoPremiere.app/Contents/Resources/"
        if [ -f "./dist/YoutubetoPremiere.app/Contents/MacOS/YoutubetoPremiere" ]; then
          mv "./dist/YoutubetoPremiere.app/Contents/MacOS/YoutubetoPremiere" "./dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink/exec"
        else
          echo "Executable not found. Check PyInstaller build process."
          exit 1
        fi
        ls -la "./dist/YoutubetoPremiere.app/Contents/Resources/"
        ls -la "./dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink"

    - name: Find ffmpeg
      shell: pwsh
      run: |
          Get-ChildItem -Recurse -Filter ffmpeg | Format-Table FullName

    - name: Copy FFmpeg to PymiereLink Path
      run: |
          # Define the FFmpeg installation path and the destination path
          FFMPEG_INSTALL_PATH=$(brew --prefix ffmpeg)
          DEST_PATH="./dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink/ffmpeg"

          # Create the destination directory and copy the entire FFmpeg installation
          mkdir -p $DEST_PATH
          cp -R $FFMPEG_INSTALL_PATH/. $DEST_PATH/

          # Optional: List contents of the destination directory to verify
          ls -la $DEST_PATH

    
    - name: List keychains
      run: |
        echo "Listing user keychains:"
        ls ~/Library/Keychains

        echo "Listing system keychains:"
        ls /Library/Keychains


    - name: list exec
      shell: pwsh
      run: |
            ls ./dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink/exec

    - name: Sign macOS Executables
      run: |
          chmod +x ./dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink/exec/
          /usr/bin/codesign --force -s - ./dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink/exec/YoutubetoPremiere -v
  
    - name: Codesign App Bundle
      env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.MACOS_CERTIFICATE_NAME }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.CERTIFICATE_PASSWORD }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
  
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
  
          /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" --options runtime --entitlements ./src/resources/entitlements.plist ./dist/YoutubetoPremiere.app -v
  


    - name: Create PKG
      run: |
            pkgbuild --root ./dist/YoutubetoPremiere.app --identifier ${{ secrets.PACKAGE_ID }} --version "1.0" --install-location "/Applications" "YoutubetoPremiere.pkg"
    
    - name: Get the release
      id: get_release
      uses: actions/github-script@v5
      with:
        script: |
          const { owner, repo } = context.repo
          const releases = await github.rest.repos.listReleases({ owner, repo })
          const preRelease = releases.data.find(release => release.prerelease && release.tag_name === 'V1.1')
          return preRelease.upload_url

    - name: Upload executables to asset
      id: upload-release-asset
      uses: softprops/action-gh-release@v1
      env:
            GITHUB_TOKEN: ${{ secrets.GH_SECRET }}
      with:
            draft: ${{ github.ref == 'refs/heads/master' }}
            prerelease: ${{ github.ref != 'refs/heads/master' }}
            tag_name: V1.1
            files: |
              YoutubetoPremiere.pkg

  win-build:
    needs: mac-build
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with: 
        persist-credentials: false

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.8
      
    - name: Cache pip
      uses: actions/cache@v2
      with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Download FFmpeg
      run: |
        mkdir ffmpeg
        curl -L https://www.gyan.dev/ffmpeg/builds/packages/ffmpeg-6.0-full_build.7z -o ffmpeg.7z

    - name: Extract FFmpeg
      run: |
        7z x ffmpeg.7z -offmpeg -aoa

    - name: Rename FFmpeg Folder
      run: |
        mv ./ffmpeg/ffmpeg-6.0-full_build ./ffmpeg/ffmpeg_win

    - name: Find ffmpeg.exe
      shell: pwsh
      run: |
        Get-ChildItem -Recurse -Filter ffmpeg.exe | Format-Table FullName
      
      
    - name: Install PyInstaller
      run: pip install pyinstaller



    - name: Build Application with PyInstaller
      run: |
            pyinstaller --onefile --clean --windowed --debug all `
            --hidden-import=engineio.async_drivers.eventlet `
            --hidden-import=engineio.async_drivers.gevent_uwsgi `
            --hidden-import=engineio.async_drivers.gevent `
            --hidden-import=engineio.async_drivers `
            --hidden-import=gevent `
            --hidden-import=engineio.async_drivers.threading `
            --hidden-import=pygame.freetype `
            --hidden-import=encodings.utf_16_le `
            --add-binary "./ffmpeg/ffmpeg_win/bin/ffmpeg.exe;./ffmpeg_win/bin/" `
            --add-data "./icon.png;." `
            --add-data "./notification_sound.mp3;." `
            --icon "./icon.ico" `
            YoutubetoPremiere.py 
    
        
    - name: Install NSIS
      run: choco install nsis

    - name: Install NSIS Plugins
      run: |
        curl -L https://nsis.sourceforge.io/NsExec_plug-in -o nsExec.dll
        mkdir -p "$RUNNER_TOOL_CACHE/nsis/3.0/nsis/plugins/x86-unicode/"
        mv nsExec.dll "$RUNNER_TOOL_CACHE/nsis/3.0/nsis/plugins/x86-unicode/"
        curl -L https://nsis.sourceforge.io/NsProcess_plugin -o nsProcessW.dll
        mv nsProcessW.dll "$RUNNER_TOOL_CACHE/nsis/3.0/nsis/plugins/x86-unicode/"
        mv "$RUNNER_TOOL_CACHE/nsis/3.0/nsis/plugins/x86-unicode/nsProcessW.dll" "$RUNNER_TOOL_CACHE/nsis/3.0/nsis/plugins/x86-unicode/nsProcess.dll"


    - name: Create Installer with NSIS
      run: |
        echo "!include 'MUI2.nsh'" > installer.nsi

        echo "Name 'YoutubetoPremiere Installer'" >> installer.nsi
        echo "OutFile 'YoutubetoPremiereInstaller.exe'" >> installer.nsi
        echo "!define MUI_ABORTWARNING" >> installer.nsi
        echo "!define MUI_ICON 'icon.ico'" >> installer.nsi
    
        echo "!insertmacro MUI_PAGE_WELCOME" >> installer.nsi
        echo "!insertmacro MUI_PAGE_DIRECTORY" >> installer.nsi
        echo "!insertmacro MUI_PAGE_INSTFILES" >> installer.nsi
        echo "!insertmacro MUI_PAGE_FINISH" >> installer.nsi
        echo "!insertmacro MUI_LANGUAGE 'English'" >> installer.nsi
    
        echo "Section 'PreInstall' SEC_PRE" >> installer.nsi
        echo "nsProcess::KillProcess 'YoutubetoPremiere.exe'" >> installer.nsi
        echo "Pop \$0" >> installer.nsi
        echo "IfFileExists 'C:\\Program Files (x86)\\YoutubetoPremiere\\YoutubetoPremiere.exe' 0 +2" >> installer.nsi
        echo "Delete 'C:\\Program Files (x86)\\YoutubetoPremiere'" >> installer.nsi
        echo "SectionEnd" >> installer.nsi
    
        echo "Function .onInit" >> installer.nsi
        echo "StrCpy \$INSTDIR 'C:\\Program Files (x86)\\Common Files\\Adobe\\CEP\\extensions\\PymiereLink'" >> installer.nsi
        echo "FunctionEnd" >> installer.nsi
    
        echo "Section 'MainSection' SEC01" >> installer.nsi
        echo "SetOutPath '\$INSTDIR'" >> installer.nsi
        echo "SetOutPath '\$INSTDIR\\PymiereLink'" >> installer.nsi
        echo "File /r 'PymiereLink\\*.*'" >> installer.nsi
        echo "SetOutPath '\$INSTDIR\\PymiereLink\\exec'" >> installer.nsi
        echo "File 'dist\\YoutubetoPremiere.exe'" >> installer.nsi
        echo "CreateDirectory '\$INSTDIR\\PymiereLink\\exec\\ffmpeg_win'" >> installer.nsi
        echo "SetOutPath '\$INSTDIR\\PymiereLink\\exec\\ffmpeg_win'" >> installer.nsi
        echo "File /r 'ffmpeg\\ffmpeg_win\\*.*'" >> installer.nsi
        echo "SectionEnd" >> installer.nsi
    
        echo "ShowInstDetails show" >> installer.nsi
        echo "ShowUnInstDetails show" >> installer.nsi
    
        makensis installer.nsi
      

    - name: List directory contents dist
      run: dir dist
    
    - name: Get the release
      id: get_release
      uses: actions/github-script@v5
      with:
          script: |
            const { owner, repo } = context.repo
            const releases = await github.rest.repos.listReleases({ owner, repo })
            const preRelease = releases.data.find(release => release.prerelease and release.tag_name === 'V1.1')
            return preRelease.upload_url
    
    - name: Upload executables to asset
      id: upload-release-asset
      uses: softprops/action-gh-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GH_SECRET }}
      with:
          draft: ${{ github.ref == 'refs/heads/master' }}
          prerelease: ${{ github.ref != 'refs/heads/master' }}
          tag_name: V1.1
          files: |
              YoutubetoPremiereInstaller.exe