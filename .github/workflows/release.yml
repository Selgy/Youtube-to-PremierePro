name: Build and Package

on:
  push:
    branches:
      - Pre-released

env:
  FFMPEG_DIR_MAC: ffmpeg_mac
  FFMPEG_DIR_WIN: ffmpeg_win


jobs:
  mac-build:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.8

    - name: Cache pip
      uses: actions/cache@v2
      with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Install dependencies
      run: pip install -r requirements.txt


    - name: Check FFmpeg installation
      run: |
        FFMPEG_DIR=${{ env.FFMPEG_DIR_MAC }}
        if brew list --versions ffmpeg > /dev/null; then
          echo "FFmpeg is already installed."
          echo "Checking for updates..."
          brew outdated ffmpeg || brew upgrade ffmpeg
        else
          echo "FFmpeg is not installed. Installing it now..."
          brew install ffmpeg
        fi

    - name: Install PyInstaller
      run: pip install pyinstaller

    - name: Build Application with PyInstaller
      run: |
        # Create the required directory structure
        mkdir -p "./dist/YoutubetoPremiere.app/Contents/Resources/Pymiere Link/exec/$FFMPEG_DIR_MAC"
    
        # Move the executable to the exec folder
        if [ -f "./dist/YoutubetoPremiere.app/Contents/MacOS/YoutubetoPremiere" ]; then
          mv "./dist/YoutubetoPremiere.app/Contents/MacOS/YoutubetoPremiere" "./dist/YoutubetoPremiere.app/Contents/Resources/Pymiere Link/exec"
        else
          echo "Executable not found. Check PyInstaller build process."
          exit 1
        fi
    
        # Copy the "Pymiere Link" folder from the root to Resources
        cp -R "./Pymiere Link" "./dist/YoutubetoPremiere.app/Contents/Resources/"
    
        # Continue with PyInstaller
        pyinstaller --onefile --clean --windowed --debug all \
          --hidden-import=engineio.async_drivers.eventlet \
          --hidden-import=engineio.async_drivers.gevent_uwsgi \
          --hidden-import=engineio.async_drivers.gevent \
          --hidden-import=engineio.async_drivers \
          --hidden-import=gevent \
          --hidden-import=engineio.async_drivers.threading \
          --hidden-import=pygame.freetype \
          --hidden-import=encodings.utf_16_le \
          --add-data "./icon.png:." \
          --add-data "./notification_sound.mp3:." \
          --add-data "./Pymiere Link:./Pymiere Link" \
          --icon "./icon.icns" \
          YoutubetoPremiere.py

      env:
        FFMPEG_DIR_MAC: ffmpeg_mac

    - name: Create PKG Installer
      run: |
                pkgbuild --root "./dist/YoutubetoPremiere.app" \
                --install-location "/Applications" \
                --identifier "com.yourcompany.YoutubetoPremiere" \
                --version "1.0" \
                "./YoutubetoPremiere.pkg"

    - name: Package PKG Installer
      run: |
            productbuild --distribution "./Distribution.xml" \
                    --resources "./Resources" \
                    --package-path "./" \
                    "./YoutubetoPremiereInstaller.pkg"

    - name: Get the release
      id: get_release
      uses: actions/github-script@v5
      with:
        script: |
          const { owner, repo } = context.repo
          const releases = await github.rest.repos.listReleases({ owner, repo })
          const preRelease = releases.data.find(release => release.prerelease && release.tag_name === 'V1.1')
          return preRelease.upload_url

    - name: Upload executables to asset
      id: upload-release-asset
      uses: softprops/action-gh-release@v1
      env:
            GITHUB_TOKEN: ${{ secrets.GH_SECRET }}
      with:
            draft: ${{ github.ref == 'refs/heads/master' }}
            prerelease: ${{ github.ref != 'refs/heads/master' }}
            tag_name: V1.1
            files: |
              YoutubetoPremiere.dmg

  win-build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with: 
        persist-credentials: false

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.8  # Replace with your Python version
    
    - name: Cache pip
      uses: actions/cache@v2
      with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Install dependencies
      run: pip install -r requirements.txt


    - name: Download FFmpeg
      run: |
        mkdir ${{ env.FFMPEG_DIR_WIN }}
        curl -L https://www.gyan.dev/ffmpeg/builds/packages/ffmpeg-6.0-full_build.7z -o ffmpeg.7z

    - name: Extract FFmpeg
      run: |
        7z x ffmpeg.7z -o${{ env.FFMPEG_DIR_WIN }} -aoa

    # Remove the following section if the extraction directly puts the files in the correct directory
    - name: Move Extracted FFmpeg Folder
      run: |
        $extractedDir = (Get-ChildItem -Path ${{ env.FFMPEG_DIR_WIN }} -Directory).FullName
        if (Test-Path -Path $extractedDir) {
            Move-Item -Path "$extractedDir\*" -Destination ${{ env.FFMPEG_DIR_WIN }}
        }
      shell: pwsh


    - name: Rename Extracted FFmpeg Folder
      run: |
            if (Test-Path -Path "ffmpeg") {
                # Remove or rename the existing 'ffmpeg' directory/file
                Remove-Item -Recurse -Force "ffmpeg"
            }
            Move-Item -Path "ffmpeg-6.0-full_build" -Destination "ffmpeg"
      shell: pwsh

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-


    - name: Find ffmpeg.exe
      shell: pwsh
      run: |
        Get-ChildItem -Recurse -Filter ffmpeg.exe | Format-Table FullName
      

    - name: Find icon.png
      shell: pwsh
      run: |
        Get-ChildItem -Recurse -Filter icon.png | Format-Table FullName
      
    - name: Install PyInstaller
      run: pip install pyinstaller
      
    - name: List installed packages
      run: pip list
 

    - name: check version pyinstaller
      run: pyinstaller -v

    - name: Find YoutubetoPremiere.py
      shell: pwsh
      run: |
          Get-ChildItem -Recurse -Filter YoutubetoPremiere.py | Format-Table FullName

    - name: Find notification_sound.mp3
      shell: pwsh
      run: |
        Get-ChildItem -Recurse -Filter notification_sound.mp3 | Format-Table FullName

    - name: List files in the repository root
      run: Get-ChildItem -Path .
      shell: pwsh
      
    - name: Build Application with PyInstaller
      run: |
            pyinstaller --onefile --clean --windowed --debug all `
            --hidden-import=engineio.async_drivers.eventlet `
            --hidden-import=engineio.async_drivers.gevent_uwsgi `
            --hidden-import=engineio.async_drivers.gevent `
            --hidden-import=engineio.async_drivers `
            --hidden-import=gevent `
            --hidden-import=engineio.async_drivers.threading `
            --hidden-import=pygame.freetype `
            --hidden-import=encodings.utf_16_le `
            --add-binary "./ffmpeg/bin/ffmpeg.exe;./ffmpeg/bin/" `
            --add-data "./icon.png;." `
            --add-data "./notification_sound.mp3;." `
            --icon "./icon.ico" `
            --add-binary "./${{ env.FFMPEG_DIR_WIN }}/bin/ffmpeg.exe;./${{ env.FFMPEG_DIR_WIN }}/bin/" `
            YoutubetoPremiere.py 
    
        
    - name: Install NSIS
      run: choco install nsis

    - name: Install NSIS Plugins
      run: |
        curl -L https://nsis.sourceforge.io/NsExec_plug-in -o nsExec.dll
        mkdir -p "$RUNNER_TOOL_CACHE/nsis/3.0/nsis/plugins/x86-unicode/"
        mv nsExec.dll "$RUNNER_TOOL_CACHE/nsis/3.0/nsis/plugins/x86-unicode/"

      
    - name: Create Installer with NSIS
      run: |
        echo "!include MUI2.nsh" > installer.nsi
        echo "Caption 'YoutubetoPremiere Installer'" >> installer.nsi
        echo "Outfile 'YoutubetoPremiereInstaller.exe'" >> installer.nsi
        echo '!define MUI_INSTFILESPAGE_TEXT_TOP "Youtube to Premiere is now being installed on your computer."' >> installer.nsi
        echo '!define MUI_INSTFILESPAGE_TEXT_COMPLETED "Installation Completed"' >> installer.nsi
        echo '!define MUI_FINISHPAGE_TITLE "Installation Completed"' >> installer.nsi
        echo '!define MUI_FINISHPAGE_TEXT "Youtube to Premiere has been successfully installed on your computer."' >> installer.nsi
        echo '!define MUI_FINISHPAGE_BUTTON "Finish"' >> installer.nsi
        echo '!define MUI_FINISHPAGE_RUN "$INSTDIR\YoutubetoPremiere.exe"' >> installer.nsi
        echo '!define MUI_FINISHPAGE_SHOWREADME "https://chrome.google.com/webstore/detail/youtube-to-premiere-pro/lhoepckbiamgobehojaibapoddjpfmfo"' >> installer.nsi
        echo '!define MUI_FINISHPAGE_SHOWREADME_TEXT "Open Chrome Extension Page"' >> installer.nsi
        echo '!insertmacro MUI_PAGE_INSTFILES' >> installer.nsi
        echo '!insertmacro MUI_PAGE_FINISH' >> installer.nsi
        echo 'Icon "icon.ico"' >> installer.nsi
        
        echo 'Section "Copy PymiereLink Extension" SEC01' >> installer.nsi
        echo 'SetOutPath "C:\Program Files (x86)\Common Files\Adobe\CEP\extensions\Pymiere Link"' >> installer.nsi
        echo 'File /r "Pymiere Link\*.*"' >> installer.nsi
        echo 'SectionEnd' >> installer.nsi
        
        echo 'Section "Install YoutubetoPremiere" SEC02' >> installer.nsi
        echo 'SetOutPath "C:\Program Files (x86)\Common Files\Adobe\CEP\extensions\Pymiere Link\exec"' >> installer.nsi
        echo 'File "dist\YoutubetoPremiere.exe"' >> installer.nsi
        echo 'CreateDirectory "C:\Program Files (x86)\Common Files\Adobe\CEP\extensions\Pymiere Link\exec\${{ env.FFMPEG_DIR_WIN }}"' >> installer.nsi
        echo 'SetOutPath "C:\Program Files (x86)\Common Files\Adobe\CEP\extensions\Pymiere Link\exec\${{ env.FFMPEG_DIR_WIN }}"' >> installer.nsi
        echo 'File /r "${{ env.FFMPEG_DIR_WIN }}\*.*"' >> installer.nsi
        echo 'SectionEnd' >> installer.nsi        
        
        makensis installer.nsi
      

    - name: List directory contents dist
      run: dir dist

    - name: Get the release
      id: get_release
      uses: actions/github-script@v5
      with:
        script: |
          const { owner, repo } = context.repo
          const releases = await github.rest.repos.listReleases({ owner, repo })
          const preRelease = releases.data.find(release => release.prerelease && release.tag_name === 'V1.1')
          return preRelease.upload_url

    - name: Upload executables to asset
      id: upload-release-asset
      uses: softprops/action-gh-release@v1
      env:
            GITHUB_TOKEN: ${{ secrets.GH_SECRET }}
      with:
            draft: ${{ github.ref == 'refs/heads/master' }}
            prerelease: ${{ github.ref != 'refs/heads/master' }}
            tag_name: V1.1
            files: |
                YoutubetoPremiereInstaller.exe