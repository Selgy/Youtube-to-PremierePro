name: Build and Package

on:
  push:
    branches:
      - Pre-released

jobs:
  mac-build:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.8

    - name: Cache pip
      uses: actions/cache@v2
      with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Check FFmpeg installation
      run: |
        if brew list --versions ffmpeg > /dev/null; then
          echo "FFmpeg is already installed."
          echo "Checking for updates..."
          brew outdated ffmpeg || brew upgrade ffmpeg
        else
          echo "FFmpeg is not installed. Installing it now..."
          brew install ffmpeg
        fi

    - name: Find ffmpeg
      run: |
        find ./ -name "ffmpeg" -type f -exec echo "Found ffmpeg at: {}" \;


    - name: Install PyInstaller
      run: pip install pyinstaller

    - name: Build Application with PyInstaller
      run: |
        pyinstaller --onefile --clean --windowed --debug all \
        --hidden-import=engineio.async_drivers.eventlet \
        --hidden-import=engineio.async_drivers.gevent_uwsgi \
        --hidden-import=engineio.async_drivers.gevent \
        --hidden-import=engineio.async_drivers \
        --hidden-import=gevent \
        --hidden-import=engineio.async_drivers.threading \
        --hidden-import=pygame.freetype \
        --hidden-import=encodings.utf_16_le \
        --add-data "./icon.png:." \
        --add-data "./notification_sound.mp3:." \
        --icon "./icon.icns" \
        YoutubetoPremiere.py



    - name: Prepare PymiereLink and Installation Script
      run: |
        mkdir -p "./dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink"
        mkdir -p "./dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink/exec"
        mkdir -p "./dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink/exec/ffmpeg"
        cp -R "./PymiereLink" "./dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink"
        cp "install_pymierelink.sh" "./dist/YoutubetoPremiere.app/Contents/Resources/"
        if [ -f "./dist/YoutubetoPremiere.app/Contents/MacOS/YoutubetoPremiere" ]; then
          mv "./dist/YoutubetoPremiere.app/Contents/MacOS/YoutubetoPremiere" "./dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink/exec"
        else
          echo "Executable not found. Check PyInstaller build process."
          exit 1
        fi
        ls -la "./dist/YoutubetoPremiere.app/Contents/Resources/"
        ls -la "./dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink"


    - name: Prepare FFmpeg directory
      run: |
          mkdir -p "./dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink/exec/ffmpeg"
          echo "Listing contents of temp ffmpeg directory:"
          ls -la "./usr/local/Cellar/ffmpeg/6.0_1"
        
    - name: Move FFmpeg to the exec folder
      run: |
          cp -R /usr/local/Cellar/ffmpeg/6.0_1 "./dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink/exec/ffmpeg"
          else
            echo "FFmpeg directory is empty or does not exist."
            exit 1
          fi



    - name: Create macOS Package
      run: |
        # Define installation location and package identifier
        INSTALL_LOCATION="/Library/Application Support/Adobe/CEP/extensions/PymiereLink"
        PACKAGE_ID="com.selgy.youtubetopremiere"

        # Create a temporary package root directory
        mkdir -p ./pkgroot"$INSTALL_LOCATION"

        # Copy files to the package root directory
        cp -R "./dist/YoutubetoPremiere.app" "./pkgroot$INSTALL_LOCATION"

        # Build the package
        pkgbuild --root "./pkgroot" \
                --identifier "$PACKAGE_ID" \
                --install-location "$INSTALL_LOCATION" \
                --version "1.0" \
                --ownership "recommended" \
                "YoutubetoPremiere.pkg"

    - name: Get the release
      id: get_release
      uses: actions/github-script@v5
      with:
        script: |
          const { owner, repo } = context.repo
          const releases = await github.rest.repos.listReleases({ owner, repo })
          const preRelease = releases.data.find(release => release.prerelease && release.tag_name === 'V1.1')
          return preRelease.upload_url

    - name: Upload executables to asset
      id: upload-release-asset
      uses: softprops/action-gh-release@v1
      env:
            GITHUB_TOKEN: ${{ secrets.GH_SECRET }}
      with:
            draft: ${{ github.ref == 'refs/heads/master' }}
            prerelease: ${{ github.ref != 'refs/heads/master' }}
            tag_name: V1.1
            files: |
              YoutubetoPremiere.pkg

  win-build:
    needs: mac-build
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with: 
        persist-credentials: false

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.8
      
    - name: Cache pip
      uses: actions/cache@v2
      with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Download FFmpeg
      run: |
        mkdir ffmpeg
        curl -L https://www.gyan.dev/ffmpeg/builds/packages/ffmpeg-6.0-full_build.7z -o ffmpeg.7z

    - name: Extract FFmpeg
      run: |
        7z x ffmpeg.7z -offmpeg -aoa

    - name: Rename FFmpeg Folder
      run: |
        mv ./ffmpeg/ffmpeg-6.0-full_build ./ffmpeg/ffmpeg_win

    - name: Find ffmpeg.exe
      shell: pwsh
      run: |
        Get-ChildItem -Recurse -Filter ffmpeg.exe | Format-Table FullName
      
      
    - name: Install PyInstaller
      run: pip install pyinstaller



    - name: Build Application with PyInstaller
      run: |
            pyinstaller --onefile --clean --windowed --debug all `
            --hidden-import=engineio.async_drivers.eventlet `
            --hidden-import=engineio.async_drivers.gevent_uwsgi `
            --hidden-import=engineio.async_drivers.gevent `
            --hidden-import=engineio.async_drivers `
            --hidden-import=gevent `
            --hidden-import=engineio.async_drivers.threading `
            --hidden-import=pygame.freetype `
            --hidden-import=encodings.utf_16_le `
            --add-binary "./ffmpeg/ffmpeg_win/bin/ffmpeg.exe;./ffmpeg_win/bin/" `
            --add-data "./icon.png;." `
            --add-data "./notification_sound.mp3;." `
            --icon "./icon.ico" `
            YoutubetoPremiere.py 
    
        
    - name: Install NSIS
      run: choco install nsis

    - name: Install NSIS Plugins
      run: |
        curl -L https://nsis.sourceforge.io/NsExec_plug-in -o nsExec.dll
        mkdir -p "$RUNNER_TOOL_CACHE/nsis/3.0/nsis/plugins/x86-unicode/"
        mv nsExec.dll "$RUNNER_TOOL_CACHE/nsis/3.0/nsis/plugins/x86-unicode/"
        curl -L https://nsis.sourceforge.io/NsProcess_plugin -o nsProcessW.dll
        mv nsProcessW.dll "$RUNNER_TOOL_CACHE/nsis/3.0/nsis/plugins/x86-unicode/"
        mv "$RUNNER_TOOL_CACHE/nsis/3.0/nsis/plugins/x86-unicode/nsProcessW.dll" "$RUNNER_TOOL_CACHE/nsis/3.0/nsis/plugins/x86-unicode/nsProcess.dll"


    - name: Create Installer with NSIS
      run: |
        echo "!include 'MUI2.nsh'" > installer.nsi

        echo "Name 'YoutubetoPremiere Installer'" >> installer.nsi
        echo "OutFile 'YoutubetoPremiereInstaller.exe'" >> installer.nsi
        echo "!define MUI_ABORTWARNING" >> installer.nsi
        echo "!define MUI_ICON 'icon.ico'" >> installer.nsi
    
        echo "!insertmacro MUI_PAGE_WELCOME" >> installer.nsi
        echo "!insertmacro MUI_PAGE_DIRECTORY" >> installer.nsi
        echo "!insertmacro MUI_PAGE_INSTFILES" >> installer.nsi
        echo "!insertmacro MUI_PAGE_FINISH" >> installer.nsi
        echo "!insertmacro MUI_LANGUAGE 'English'" >> installer.nsi
    
        echo "Section 'PreInstall' SEC_PRE" >> installer.nsi
        echo "nsProcess::KillProcess 'YoutubetoPremiere.exe'" >> installer.nsi
        echo "Pop \$0" >> installer.nsi
        echo "IfFileExists 'C:\\Program Files (x86)\\YoutubetoPremiere\\YoutubetoPremiere.exe' 0 +2" >> installer.nsi
        echo "Delete 'C:\\Program Files (x86)\\YoutubetoPremiere'" >> installer.nsi
        echo "SectionEnd" >> installer.nsi
    
        echo "Function .onInit" >> installer.nsi
        echo "StrCpy \$INSTDIR 'C:\\Program Files (x86)\\Common Files\\Adobe\\CEP\\extensions\\PymiereLink'" >> installer.nsi
        echo "FunctionEnd" >> installer.nsi
    
        echo "Section 'MainSection' SEC01" >> installer.nsi
        echo "SetOutPath '\$INSTDIR'" >> installer.nsi
        echo "SetOutPath '\$INSTDIR\\PymiereLink'" >> installer.nsi
        echo "File /r 'PymiereLink\\*.*'" >> installer.nsi
        echo "SetOutPath '\$INSTDIR\\PymiereLink\\exec'" >> installer.nsi
        echo "File 'dist\\YoutubetoPremiere.exe'" >> installer.nsi
        echo "CreateDirectory '\$INSTDIR\\PymiereLink\\exec\\ffmpeg_win'" >> installer.nsi
        echo "SetOutPath '\$INSTDIR\\PymiereLink\\exec\\ffmpeg_win'" >> installer.nsi
        echo "File /r 'ffmpeg\\ffmpeg_win\\*.*'" >> installer.nsi
        echo "SectionEnd" >> installer.nsi
    
        echo "ShowInstDetails show" >> installer.nsi
        echo "ShowUnInstDetails show" >> installer.nsi
    
        makensis installer.nsi
      

    - name: List directory contents dist
      run: dir dist
    
    - name: Get the release
      id: get_release
      uses: actions/github-script@v5
      with:
          script: |
            const { owner, repo } = context.repo
            const releases = await github.rest.repos.listReleases({ owner, repo })
            const preRelease = releases.data.find(release => release.prerelease and release.tag_name === 'V1.1')
            return preRelease.upload_url
    
    - name: Upload executables to asset
      id: upload-release-asset
      uses: softprops/action-gh-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GH_SECRET }}
      with:
          draft: ${{ github.ref == 'refs/heads/master' }}
          prerelease: ${{ github.ref != 'refs/heads/master' }}
          tag_name: V1.1
          files: |
              YoutubetoPremiereInstaller.exe