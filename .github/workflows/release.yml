name: Build and Package

on:
  push:
    branches:
      - Pre-released

jobs:
  mac-build:
  
    runs-on: macOS-latest

    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8.8  # Replace with your Python version


      - name: upgrade pip
        run: |
            pip install --upgrade pip

      - name: Install dependencies
        run: |
          pip install pyinstaller dmgbuild Pillow

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Cache pip
        uses: actions/cache@v2
        with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
            restore-keys: |
              ${{ runner.os }}-pip-
  
      - name: Download FFmpeg
        run: |
          curl -L https://evermeet.cx/ffmpeg/ffmpeg-4.4.zip -o ffmpeg.zip
          unzip ffmpeg.zip
          mv ffmpeg ffmpeg-darwin-x86_64
          chmod +x ffmpeg-darwin-x86_64

      - name: Build Application with PyInstaller
        run: |
            pyinstaller --onefile --clean --windowed --hidden-import=engineio.async_drivers.eventlet --hidden-import=engineio.async_drivers.gevent_uwsgi --hidden-import=engineio.async_drivers.gevent --hidden-import=engineio.async_drivers --hidden-import=gevent --hidden-import=engineio.async_drivers.threading --hidden-import=pygame.freetype --hidden-import=encodings.utf_16_le --add-binary "ffmpeg-darwin-x86_64:." --add-data "icon.png:." --add-data "notification_sound.mp3:." --icon=icon.icns YoutubetoPremiere.py


      - name: List directory contents
        run: |
             echo "Listing contents of current directory:"
             ls -la
             echo "Listing contents of dist directory:"
             ls -la dist
    
      - name: Debug - Show current directory and contents
        run: |
              pwd
              ls -al
    
      - name: Find YoutubetoPremiere.app
        run: find . -name "YoutubetoPremiere.app" -print
            
      - name: Create settings.py
        run: |
          echo '''
          # settings.py

          # Basic settings
          title = "YoutubetoPremiere"  # The title of the DMG window and the name of the resulting disk image
          volume_icon = "icon.icns"  # The icon for the disk image
          format = "UDBZ"  # The format of the disk image (UDRW, UDRO, UDCO, UDTO, UFBI, UDZO, UDBZ, ULFO)
          size = None  # The size of the disk image (None for automatic sizing)
          files = ["dist/YoutubetoPremiere.app"]   # The files to include in the disk image
          symlinks = {"Applications": "/Applications"}  # The symbolic links to include in the disk image

          # Appearance
          window_rect = ((400, 400), (500, 300))  # The size and position of the DMG window
          default_view = "icon-view"  # The default view style for the DMG window (icon-view or list-view)
          icon_size = 128  # The size of the icons in the DMG window
          text_size = 16  # The size of the text in the DMG window
          ''' > settings.py

      - name: Create DMG
        run: |
            mkdir -p dist/YoutubetoPremiere.app/Contents/Library/LaunchAgents
            cp com.youtubetopremiere.YoutubetoPremiere.plist dist/YoutubetoPremiere.app/Contents/Library/LaunchAgents/
            dmgbuild -s settings.py "YoutubetoPremiere" ./dist/YoutubetoPremiere.dmg
  
  
      - name: Remove standalone executable
        run: rm ./dist/YoutubetoPremiere

      - name: List dist directory contents again
        run: |
             echo "Listing contents of dist directory again:"
             ls -la dist

      - name: Get the release
        id: get_release
        uses: actions/github-script@v5
        with:
          script: |
            const { owner, repo } = context.repo
            const releases = await github.rest.repos.listReleases({ owner, repo })
            const preRelease = releases.data.find(release => release.prerelease && release.tag_name === 'V1.1')
            return preRelease.upload_url

      - name: Upload executables to asset
        id: upload-release-asset
        uses: softprops/action-gh-release@v1
        env:
              GITHUB_TOKEN: ${{ secrets.GH_SECRET }}
        with:
              draft: ${{ github.ref == 'refs/heads/master' }}
              prerelease: ${{ github.ref != 'refs/heads/master' }}
              tag_name: V1.1
              files: |
                 ./dist/*

  win-build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.8  # Replace with your Python version

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Install dependencies
      run: pip install pyinstaller Pillow

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Download FFmpeg
      run: |
        curl -L https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full.7z -o ffmpeg.7z
        7z x ffmpeg.7z -offmpeg
        move ffmpeg\bin\ffmpeg.exe ffmpeg.exe

    - name: Build Application with PyInstaller
      run: |
          pyinstaller --onefile --clean --windowed --hidden-import=engineio.async_drivers.eventlet --hidden-import=engineio.async_drivers.gevent_uwsgi --hidden-import=engineio.async_drivers.gevent --hidden-import=engineio.async_drivers --hidden-import=gevent --hidden-import=engineio.async_drivers.threading --hidden-import=pygame.freetype --hidden-import=encodings.utf_16_le --add-binary "ffmpeg.exe;." --add-data "icon.png;." --add-data "notification_sound.mp3;." --icon=icon.ico YoutubetoPremiere.py

    - name: Install NSIS
      run: choco install nsis

    - name: Create Installer with NSIS
      run: |
        echo "!define APP_NAME 'YoutubetoPremiere'" > installer.nsi
        echo "!define INSTALLER_OUTFILE 'YoutubetoPremiereInstaller.exe'" >> installer.nsi
        echo "Outfile '\${INSTALLER_OUTFILE}'" >> installer.nsi
        echo "Section" >> installer.nsi
        echo "  SetOutPath '\$INSTDIR'" >> installer.nsi
        echo "  File 'dist\YoutubetoPremiere.exe'" >> installer.nsi
        echo "SectionEnd" >> installer.nsi
        makensis installer.nsi

    - name: List directory contents
      run: dir

    - name: Get the release
      id: get_release
      uses: actions/github-script@v5
      with:
        script: |
          const { owner, repo } = context.repo
          const releases = await github.rest.repos.listReleases({ owner, repo })
          const preRelease = releases.data.find(release => release.prerelease && release.tag_name === 'V1.1')
          return preRelease.upload_url

    - name: Upload executables to asset
      id: upload-release-asset
      uses: softprops/action-gh-release@v1
      env:
            GITHUB_TOKEN: ${{ secrets.GH_SECRET }}
      with:
            draft: ${{ github.ref == 'refs/heads/master' }}
            prerelease: ${{ github.ref != 'refs/heads/master' }}
            tag_name: V1.1
            files: |
                YoutubetoPremiereInstaller.exe