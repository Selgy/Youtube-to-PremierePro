name: Build and Package

on:
  push:
    branches:
      - Pre-released

jobs:
  mac-build:
    runs-on: macos-latest

    steps:
    - name: Sync clock
      run: sudo sntp -sS time.windows.com

    - name: Select Xcode Version
      run: sudo xcode-select -switch /Applications/Xcode_14.0.app

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.8

    - name: Cache pip
      uses: actions/cache@v2
      with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Check and Copy FFmpeg
      run: |
          # Install FFmpeg if not present
          if ! brew list --versions ffmpeg > /dev/null; then
            echo "Installing FFmpeg..."
            brew install ffmpeg
          else
            echo "FFmpeg is already installed."
          fi

          # Define the destination path for FFmpeg
          EXEC_PATH="./ffmpeg"

          # Create the directory at the root and copy the entire FFmpeg installation
          mkdir -p $EXEC_PATH
          cp -R $(brew --prefix ffmpeg)/. $EXEC_PATH/

    - name: Install PyInstaller
      run: pip install pyinstaller

    - name: Build Application with PyInstaller
      run: |
        pyinstaller --onefile --clean --windowed --debug all \
        --hidden-import=engineio.async_drivers.eventlet \
        --hidden-import=engineio.async_drivers.gevent_uwsgi \
        --hidden-import=engineio.async_drivers.gevent \
        --hidden-import=engineio.async_drivers \
        --hidden-import=gevent \
        --hidden-import=engineio.async_drivers.threading \
        --hidden-import=pygame.freetype \
        --hidden-import=encodings.utf_16_le \
        --add-data "./icon.png:." \
        --add-data "./notification_sound.mp3:." \
        --icon "./icon.icns" \
        YoutubetoPremiere.py


    - name: Prepare PymiereLink and Installation Script
      run: |

        mv "./com.youtubetopremiere.YoutubetoPremiere.plist" "./dist/YoutubetoPremiere.app/Contents/Info.plist"

        cp -R "./PymiereLink" "./dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink"
        cp "install_pymierelink.sh" "./dist/YoutubetoPremiere.app/Contents/Resources/"
        if [ -f "./dist/YoutubetoPremiere.app/Contents/MacOS/YoutubetoPremiere" ]; then
          mv "./dist/YoutubetoPremiere.app/Contents/MacOS/YoutubetoPremiere" "./dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink/exec"
        else
          echo "Executable not found. Check PyInstaller build process."
          exit 1
        fi
        ls -la "./dist/YoutubetoPremiere.app/Contents/Resources/"
        ls -la "./dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink"

    - name: Find ffmpeg
      shell: pwsh
      run: |
          Get-ChildItem -Recurse -Filter ffmpeg | Format-Table FullName

    - name: Copy FFmpeg to PymiereLink Path
      run: |
          # Define the FFmpeg installation path and the destination path
          FFMPEG_INSTALL_PATH=$(brew --prefix ffmpeg)
          DEST_PATH="./dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink/ffmpeg"

          # Create the destination directory and copy the entire FFmpeg installation
          mkdir -p $DEST_PATH
          cp -R $FFMPEG_INSTALL_PATH/. $DEST_PATH/

          # Optional: List contents of the destination directory to verify
          ls -la $DEST_PATH

    


    - name: Create and Configure Keychain
      env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
            # create variables
            CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
            PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
            KEYCHAIN_PATH=$RUNNER_TEMP/SelgykeyAPP.keychain-db

            # import certificate and provisioning profile from secrets
            echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
            echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

            # create temporary keychain
            security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
            security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            

            # import certificate to keychain
            security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
            security list-keychain -d user -s $KEYCHAIN_PATH

            # Apply provisioning profile
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

            security find-certificate -a $KEYCHAIN_PATH
            security find-identity -p codesigning $KEYCHAIN_PATH
            

            # List all identities (not just valid ones) to check the certificate
            echo "Listing all identities in keychain:"
            security find-identity -p codesigning /Users/runner/Library/Keychains/build.keychain-db
            echo "find-certificate:"
            security find-certificate -a /Users/runner/Library/Keychains/build.keychain-db
        
    - name: Sign the Application
      run: |
              # Set shell to stop on error
              set -e
          
              # Extract and print the name of the certificate
              CERTIFICATE_NAME="Developer ID Application: mickael ducatez (9H8DB46V75)"
              echo "Certificate Name: $CERTIFICATE_NAME"
          
              # Print the keychain path
              echo "Keychain Path: $KEYCHAIN_PATH"
          
              # List contents of dist directory for debugging
              echo "Listing contents of dist directory:"
              ls -la dist
          
              # Use the certificate name to sign the application
              codesign --deep --timestamp --options runtime --force --verify --verbose --sign "Developer ID Application: mickael ducatez (9H8DB46V75)" "dist/YoutubetoPremiere.app"          
              echo "Signing FFmpeg binaries"
              find "dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink/ffmpeg" \( -name "*.dylib" -or -name "*.so" -or -name "ffmpeg" \) -exec codesign --timestamp --options runtime --force --verify --verbose --sign "$CERTIFICATE_NAME" {} \;
              # Sign everything in the FFmpeg bin folder
              find "dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink/ffmpeg/bin" -type f -exec codesign --timestamp --options runtime --force --verify --verbose --sign "$CERTIFICATE_NAME" {} \;
              find "dist/YoutubetoPremiere.app/Contents/Resources/PymiereLink/exec" -type f -exec codesign --timestamp --options runtime --force --verify --verbose --sign "$CERTIFICATE_NAME" {} \;


              
    - name: list app content
      run: |
          # List contents of the entire .app bundle to verify
          echo "Listing contents of the .app bundle:"
          find "./dist/YoutubetoPremiere.app"


    - name: "Notarize app bundle"
      env:
            PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.APPLE_ID }}
            PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
            PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
      run: |
              # Store the notarization credentials
              echo "Create keychain profile"
              xcrun notarytool store-credentials "notarytool-profile" --apple-id "${{ secrets.APPLE_ID }}" --team-id "${{ secrets.APPLE_TEAM_ID }}" --password "${{ secrets.APP_SPECIFIC_PASSWORD }}"
        
              # Create a ZIP file of the .app for notarization
              echo "Creating temp notarization archive"
              ditto -c -k --keepParent "./dist/YoutubetoPremiere.app" "notarization.zip"
        
              # Send the notarization request and capture the NOTARIZATION_ID
              echo "Notarize app"
              NOTARIZATION_OUTPUT=$(xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait --output-format json)
              NOTARIZATION_ID=$(echo "$NOTARIZATION_OUTPUT" | jq -r '.id')
              echo "Notarization ID: $NOTARIZATION_ID"
              echo "NOTARIZATION_ID=$NOTARIZATION_ID" >> $GITHUB_ENV
        
              # Check if submission was successful
              if [ "$NOTARIZATION_ID" = "null" ]; then
                  echo "Notarization submission failed."
                  echo "Output: $NOTARIZATION_OUTPUT"
                  exit 1
              fi
        
              # Fetch Notarization Info
              echo "Fetching Notarization Info"
              NOTARIZATION_INFO=$(xcrun notarytool info $NOTARIZATION_ID --keychain-profile "notarytool-profile" --output-format json)
              echo "Notarization Info: $NOTARIZATION_INFO"
        
              if [[ $NOTARIZATION_INFO == *"\"status\":\"Accepted\""* ]]; then
              echo "Stapling notarization ticket to the app"
              xcrun stapler staple "./dist/YoutubetoPremiere.app"
              else
                  echo "Notarization failed."
                  exit 1
              fi
      shell: /bin/bash -e {0}
        
    - name: Fetch Notarization Log
      if: always()
      run: |
        if [ "$NOTARIZATION_ID" != "null" ]; then
          xcrun notarytool log $NOTARIZATION_ID --keychain-profile "notarytool-profile"
        else
          echo "No Notarization ID available to fetch logs."
        fi


    - name: Create PKG
      run: |
            pkgbuild --root ./dist/YoutubetoPremiere.app --identifier ${{ secrets.PACKAGE_ID }} --version "1.0" --install-location "/Applications" "YoutubetoPremiere.pkg"
    
    - name: Get the release
      id: get_release
      uses: actions/github-script@v5
      with:
        script: |
          const { owner, repo } = context.repo
          const releases = await github.rest.repos.listReleases({ owner, repo })
          const preRelease = releases.data.find(release => release.prerelease && release.tag_name === 'V1.1')
          return preRelease.upload_url

    - name: Upload executables to asset
      id: upload-release-asset
      uses: softprops/action-gh-release@v1
      env:
            GITHUB_TOKEN: ${{ secrets.GH_SECRET }}
      with:
            draft: ${{ github.ref == 'refs/heads/master' }}
            prerelease: ${{ github.ref != 'refs/heads/master' }}
            tag_name: V1.1
            files: |
              YoutubetoPremiere.pkg


    - name: Clean up keychain and provisioning profile
      if: ${{ always() }}
      run: |
        security delete-keychain $KEYCHAIN_PATH
        rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision


  win-build:
    needs: mac-build
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with: 
        persist-credentials: false

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.8
      
    - name: Cache pip
      uses: actions/cache@v2
      with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Download FFmpeg
      run: |
        mkdir ffmpeg
        curl -L https://www.gyan.dev/ffmpeg/builds/packages/ffmpeg-6.0-full_build.7z -o ffmpeg.7z

    - name: Extract FFmpeg
      run: |
        7z x ffmpeg.7z -offmpeg -aoa

    - name: Rename FFmpeg Folder
      run: |
        mv ./ffmpeg/ffmpeg-6.0-full_build ./ffmpeg/ffmpeg_win

    - name: Find ffmpeg.exe
      shell: pwsh
      run: |
        Get-ChildItem -Recurse -Filter ffmpeg.exe | Format-Table FullName
      
      
    - name: Install PyInstaller
      run: pip install pyinstaller



    - name: Build Application with PyInstaller
      run: |
            pyinstaller --onefile --clean --windowed --debug all `
            --hidden-import=engineio.async_drivers.eventlet `
            --hidden-import=engineio.async_drivers.gevent_uwsgi `
            --hidden-import=engineio.async_drivers.gevent `
            --hidden-import=engineio.async_drivers `
            --hidden-import=gevent `
            --hidden-import=engineio.async_drivers.threading `
            --hidden-import=pygame.freetype `
            --hidden-import=encodings.utf_16_le `
            --add-binary "./ffmpeg/ffmpeg_win/bin/ffmpeg.exe;./ffmpeg_win/bin/" `
            --add-data "./icon.png;." `
            --add-data "./notification_sound.mp3;." `
            --icon "./icon.ico" `
            YoutubetoPremiere.py 
    
        
    - name: Install NSIS
      run: choco install nsis

    - name: Install NSIS Plugins
      run: |
        curl -L https://nsis.sourceforge.io/NsExec_plug-in -o nsExec.dll
        mkdir -p "$RUNNER_TOOL_CACHE/nsis/3.0/nsis/plugins/x86-unicode/"
        mv nsExec.dll "$RUNNER_TOOL_CACHE/nsis/3.0/nsis/plugins/x86-unicode/"
        curl -L https://nsis.sourceforge.io/NsProcess_plugin -o nsProcessW.dll
        mv nsProcessW.dll "$RUNNER_TOOL_CACHE/nsis/3.0/nsis/plugins/x86-unicode/"
        mv "$RUNNER_TOOL_CACHE/nsis/3.0/nsis/plugins/x86-unicode/nsProcessW.dll" "$RUNNER_TOOL_CACHE/nsis/3.0/nsis/plugins/x86-unicode/nsProcess.dll"


    - name: Create Installer with NSIS
      run: |
        echo "!include 'MUI2.nsh'" > installer.nsi

        echo "Name 'YoutubetoPremiere Installer'" >> installer.nsi
        echo "OutFile 'YoutubetoPremiereInstaller.exe'" >> installer.nsi
        echo "!define MUI_ABORTWARNING" >> installer.nsi
        echo "!define MUI_ICON 'icon.ico'" >> installer.nsi
    
        echo "!insertmacro MUI_PAGE_WELCOME" >> installer.nsi
        echo "!insertmacro MUI_PAGE_DIRECTORY" >> installer.nsi
        echo "!insertmacro MUI_PAGE_INSTFILES" >> installer.nsi
        echo "!insertmacro MUI_PAGE_FINISH" >> installer.nsi
        echo "!insertmacro MUI_LANGUAGE 'English'" >> installer.nsi
    
        echo "Section 'PreInstall' SEC_PRE" >> installer.nsi
        echo "nsProcess::KillProcess 'YoutubetoPremiere.exe'" >> installer.nsi
        echo "Pop \$0" >> installer.nsi
        echo "IfFileExists 'C:\\Program Files (x86)\\YoutubetoPremiere\\YoutubetoPremiere.exe' 0 +2" >> installer.nsi
        echo "Delete 'C:\\Program Files (x86)\\YoutubetoPremiere'" >> installer.nsi
        echo "SectionEnd" >> installer.nsi
    
        echo "Function .onInit" >> installer.nsi
        echo "StrCpy \$INSTDIR 'C:\\Program Files (x86)\\Common Files\\Adobe\\CEP\\extensions\\PymiereLink'" >> installer.nsi
        echo "FunctionEnd" >> installer.nsi
    
        echo "Section 'MainSection' SEC01" >> installer.nsi
        echo "SetOutPath '\$INSTDIR'" >> installer.nsi
        echo "SetOutPath '\$INSTDIR\\PymiereLink'" >> installer.nsi
        echo "File /r 'PymiereLink\\*.*'" >> installer.nsi
        echo "SetOutPath '\$INSTDIR\\PymiereLink\\exec'" >> installer.nsi
        echo "File 'dist\\YoutubetoPremiere.exe'" >> installer.nsi
        echo "CreateDirectory '\$INSTDIR\\PymiereLink\\exec\\ffmpeg_win'" >> installer.nsi
        echo "SetOutPath '\$INSTDIR\\PymiereLink\\exec\\ffmpeg_win'" >> installer.nsi
        echo "File /r 'ffmpeg\\ffmpeg_win\\*.*'" >> installer.nsi
        echo "SectionEnd" >> installer.nsi
    
        echo "ShowInstDetails show" >> installer.nsi
        echo "ShowUnInstDetails show" >> installer.nsi
    
        makensis installer.nsi
      

    - name: List directory contents dist
      run: dir dist
    
    - name: Get the release
      id: get_release
      uses: actions/github-script@v5
      with:
          script: |
            const { owner, repo } = context.repo
            const releases = await github.rest.repos.listReleases({ owner, repo })
            const preRelease = releases.data.find(release => release.prerelease and release.tag_name === 'V1.1')
            return preRelease.upload_url
    
    - name: Upload executables to asset
      id: upload-release-asset
      uses: softprops/action-gh-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GH_SECRET }}
      with:
          draft: ${{ github.ref == 'refs/heads/master' }}
          prerelease: ${{ github.ref != 'refs/heads/master' }}
          tag_name: V1.1
          files: |
              YoutubetoPremiereInstaller.exe